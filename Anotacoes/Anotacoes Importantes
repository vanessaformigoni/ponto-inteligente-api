//Video 05

O jpa repository é do spring data, que acessa banco de dados e usa entidades para isso;
Nos services contem as regras de negocio;
o Flayway serve para fazer a migração do banco de dados;

//Video 06
Quando for criar um projeto do 0, primeiro cria o repositorio no github,depois tem que inicializar o projeto como se fosse um projeto git, -- git init, depois é necessãrio associar o repositorio git remoto com o git local, -- git remote add origin https:dogit , depois para sincronizar, faço o -- git pull origin master da aplicação pra baixar pra minha máquina. Depois só dar add, commit, e push origin master.

//Video 09
Aqui talvez tenham informações sobre o porque o TRAVIS CI nâo funciona. Voltar depois.

//Video 10
Enums sâo dados estáticos que muito dificilmente serão alterados. Entâo não há a necessidade de criar elementos no BD;
ROLE_algumacoisa é por causa do spring security;
FechTypeLazy, permite quando você for carregar uma empressa, não carregue todos funcionarios;
O Cascade all é pra excluir ou exercutar todas as operações nos funcionarios que são dependentes de uma empresa;
Metodo @Transiente, é um metodo que não esta relacionado com o mapeamento com o BD, o JPA deve ignorar (mais pra frente eu entenderei);
Eager pois sempre que carregar os dados do funcionario, quero saber os dados da empresa.
A data ele colocou um @ temporal.timestamp pra saber a data e local que ocorreu o evento.

//Video 11
Vamos usar o framework flyway será usado pra criar, gerenciar e migrar as tabelas no banco de dados.
No banco é Bigint e no java Long 
No banco ẽ varchar e no java String
No banco é Datetime e no java Date
No banco é float e no java float
No banco é decimal e no java BigDecimal

//Video 12
Quando for fazer query que estiver associada a outra entidade, ai é necessário escrever a propria query (com o jpql nesse caso).
Para fazer testes relacionados a bancos, será usado o banco em h2.
Pageable retorna os resultados paginado.
Lembrar que repositorios são interfaces (Nesse casoo).

//Video 13
Nos métodos de testes unitários, as classes sempre serao void, pois não irão retornar nada, afinal ninguém as chamará, da mesma forma que os argumentos também serão vazios, haja vista que ninguém irá enviar argumentos. Então, se precisar de argumentos, terão que ser variáveis da classe de teste.

//Video 14
Nesse modelo, ele usa uma forma diferente, ele não implementa direto no service como estou acostumada. Ele cria a interface service, com os metodos que ela deve conter e depois e cria o serviceImpl, que extende a service e de fato implementa os metodos. O uso de interface é recomendado pois é uma boa pratica de OO e mantem o código mais bem estruturado. Para criar um serviço, precisamos anotar com @Service. 

//Video 15
Nos testes, o que uma classe testada for usar, ex repository, voce deve mockar pra não ser executado.

//Video 17
O controller é quem expoe a api para ser consumida por aplicações client. A aplicação se tornará uma aplicação WEB. Preciso ter o tomcat para executala. Dto e validação do lado do servidor. Pra isso o hibernate validator. Quando a dependencia do spring boot security é adicionado, ele habilita a autenticação basic. Qualquer acesso a qualquer serviço o SS barra. Ele pede a autendicação.

A biblioteca Hibernate Validator, em conjunto com o JPA fornecem uma solução completa para validação baseada em anotações, onde basta anotarmos os atributos de nossas
entidades​ ​ ou​ ​ DTOs​ ​ conforme​ ​ necessário. Tais anotações serão executadas assim que a API for chamada, e caso algum dos valores não atendam as regras impostas pelos validadores, um erro será lançado como retorno informando​ ​ a ​ ​ causa​ ​ do​ ​ problema. Ex: @CNPJ​, @CPF.
Repare nas anotações ‘@NotEmpty’, ‘@CNPJ’, e ‘@Length’, elas são as responsáveis por informar as regras de validação aplicadas para cada campo do DTO, e como suas
descrições sugerem, elas validam um valor não nulo, CNPJ válido, e tamanho do texto, respectivamente.

Para que a validação seja executada, devemos adicionar em nosso controller a anotação ‘@Valid’, e também fazer uso do ‘BindingResult’, que será responsável por conter o retorno da​ ​ validação.

No DTO que iremos adiconar as regras de validação de Characters e etc..

Tem que anotar com @Restcontroller (para o spring saber que é um end point), RequestMapping (para informar o caminho da api). Quando o metodo post for chamado, 
ele fara a o cadastro das informações no banco de dados da aplicação.

A ‘@RequestBody’ é uma classe do Spring responsável por converter os dados
automaticamente​ ​ de​ ​ uma​ ​ requisição​ ​ HTTP​ ​ em​ ​ formato​ ​ Java​ ​ para​ ​ o ​ ​ DTO.
O ‘ResponseEntity’ é uma classe utilitária também do Spring que nos permite gerenciar as
requisições​ ​ HTTP,​ ​ por​ ​ isso​ ​ é ​ ​ utilizada​ ​ para​ ​ retornar​ ​ o ​ ​ DTO​ ​ para​ ​ o ​ ​ cliente.

Eu acho que nesse código : public ResponseEntity<Response<CadastroPJDto>> cadastrar(@Valid @RequestBody CadastroPJDto cadastroPJDto,
			BindingResult result) 

O ‘ResponseEntity’ respoonde OK, 200, o ResponseBody converte os dados da requisao Http e converte na classe CadastroPJDto. BindingResult terá o
resultado da validação dos dtos e possiveis erros. Caso tenha problema de cpf e tals.

Algumas validações como se o cpf já existe por exemplo, é feito em um novo metodo dentro da classe controller. Isso o valid não tem como saber/fazer.

A senha vai vir do formulario e eu já vou salvar na classe cripitografada.

0O BindingResult armazena o resultado das requisições​.

No controller eu estou persistindo e depois enviando o ok, com um body de informações.
Criar teste unitário para CadastroControllerPJ

//Video 19

ValorHora, e etc são optional pois eles podem ter valor ou não. Então é mais facil trabalhar com esse objeto nulo usando o optional. E ele tem metodos
próprios pra tratar os valores nulos.

//Video 20

Quando eu quiser passar uma variável pelo path, preciso anotar com @PathVariable (e não RequestBody).
MockMvc é a parteWeb, precisamos de um contexto web tbm. Pq do controller ele é web, http. Tem que anotar com @AutoconfigureMOckMvc. Com isso vamos poder criar o
MockMvc que vai simular o container Web para fazermos requisições​ http.
No controller, o teste é um pouco diferente, você testa as respostas da requisição. Validar o retorno.
Com o MockMvc usaremos pra fazer a chamada ao controller.

//Video 22
Faremos CRUD
Apache comons tem uns recursos maneiros pra lidar com Enums.
@RequestParam é o parametro que voce passa na url como uma query, que a gente add o "?" , e adiciona outros parametros.É opcional, mas pode receber.
O page vai contar o LancamentoDto dentro dele e vai adicionar as informações de Dto dentro dele.
Como no post ele não adicionou nenhuma url, então api/lancamentos já serve.

//Video 24
Adicionar segurança a aplicação.
Para os testes nâo falharem, é necessário adicionar ao controller @WithMockUser, pois agora não será qualquer um que poderá acessar ao endpoint. Com o @WithMockUser
informa-se que o usuário esta autenticado.


//Video 25

Sâo necessarios as inclusão de duas dependencias para o swagger, o springfox-swagger2 que gera a documentação e o springfox-swagger-ui para a interface gráfica e, ambas devem estar na mesma versão por questões de compatibilidade. O swagger não deve ficar habilitado no ambiente de produção, somente testes, entâo iremos usar a ideia de profiles. Nós iremos setar o profile atual como profile de dev, quando formos subir no heroku pra prod, usaremos outro profile.
@Configuration = arquivo de configuração deve ter.
@Profife("dev") = estou dizendo que nessa classe só irá funcionar se eu estiver usando o profile dev definido nos properties.
@EnableSwagger2 = irá habilitar o swagger na minha aplicação.
O flayway e o security não devem ser carregados juntos porque causa conflito.
localhost:8080/V2/api-docs é o swagger core, porem não da pra entender muito, por isso usamos interface grafica swagger-ui.

//Video 26
Adicionar ao pom o eh cashe
Preciso adicionar um arquivo.xml em resources
@Enablecashing informa ao spring que usaremos cash
E iremos usar o cash na camada de serviço colocando @Cachable, que diz que o resultado deverá ser armazenado/consultado no cash.
O @Cashput mantem a consistencia dos dados na na cash hora de atualizar.
Tentar entender porque precisei

//Video 27
Não publiquei no Heroku ainda porque quero melhorar mais. Porem irei fazer.



